<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MacOps.io]]></title>
  <link href="http://macops.github.io/atom.xml" rel="self"/>
  <link href="http://macops.github.io/"/>
  <updated>2013-05-31T21:35:37+02:00</updated>
  <id>http://macops.github.io/</id>
  <author>
    <name><![CDATA[headmin]]></name>
    <email><![CDATA[info+blog@macop.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[homebrew-cask to install simple apps]]></title>
    <link href="http://macops.github.io/homebrew/terminal/software%20install/cli/automation/2013/05/31/homebrew-cask-to-install-simple-apps/"/>
    <updated>2013-05-31T18:45:00+02:00</updated>
    <id>http://macops.github.io/homebrew/terminal/software%20install/cli/automation/2013/05/31/homebrew-cask-to-install-simple-apps</id>
    <content type="html"><![CDATA[<p>An interesting extension to homebrew can be found here on GitHub <a href="http://bit.ly/11tA8JQ">http://bit.ly/11tA8JQ</a></p>

<p>Its called <em>homebrew-cask</em> and will allow you to install software like 1Password, Alfred2, VLC Player etc. directly from the command-line in the usual homebrew fashion via such command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew cask install one-password
</span></code></pre></td></tr></table></div></figure>


<p>Basically homebrew-cask is based hombrew utilizing an extended repository with collective formulas of stored information where to download that specific software (i.e. VLC Player, Firefox) from the vendors-server, once homebrew-cask downloaded the source as a .zip/.dmg file the payload gets installed and will by shown as symlink in  ~/Applications directory  &ndash; yes exactly thats the user domain aka NSHomeDirectory().</p>

<p>The real path for applications installed by hombrew-cask is this one: <em>/opt/homebrew-cask/Caskroom/<vendor>/<version>/<named>.app</em></p>

<p>current available cask commands are:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>- alfred: used to modify Alfred<span class="err">&#39;</span>s scope to include the Caskroom
</span><span class='line'>- info: displays information about the cask of the given name
</span><span class='line'>- list: lists installed casks
</span><span class='line'>- search: searches all known casks
</span><span class='line'>- home: opens the homepage of the cask of the given name
</span><span class='line'>- uninstall: uninstalls the cask of the given name
</span><span class='line'>- audit: verifies installability of casks
</span><span class='line'>- create: creates a cask of the given name and opens it in an editor
</span><span class='line'>- checklinks: checks <span class="k">for </span>bad cask links
</span><span class='line'>- edit: edits the cask of the given name
</span><span class='line'>- linkapps: makes a symlink from all cask-installed .app files into ~/Applications
</span><span class='line'>- unlinkapps: removes symlinks from cask-installed .app files from ~/Applications
</span><span class='line'>- install: installs the cask of the given name
</span></code></pre></td></tr></table></div></figure>


<p>Its a pretty new project and of course you&rsquo;ll might run into some issues but it&rsquo;s not meant to be replacing Munki, Jamf CasperSuite or other solutions on the shelf.</p>

<p>Some examples that are already in the sofware list:</p>

<ul>
<li>Firefox v21</li>
<li>Calibre</li>
<li>GitHub.app</li>
<li>VLC</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using homebrew on OSX in Enterprise Environments]]></title>
    <link href="http://macops.github.io/homebrew/OSX/Enterprise/MacPorts/curl/2013/05/31/using-homebrew-in-enterprise-environments/"/>
    <updated>2013-05-31T13:37:00+02:00</updated>
    <id>http://macops.github.io/homebrew/OSX/Enterprise/MacPorts/curl/2013/05/31/using-homebrew-in-enterprise-environments</id>
    <content type="html"><![CDATA[<p>Ever tried to to install software via homebrew while you&rsquo;re in enterprise environment or other networks with a web proxy present?
Glad you have tried, but without knowing in advance you&rsquo;ll might initally run into a problem while installing or updating via homebrew. Obviously that problem should be pretty simple to fix with enabling curl to use the proxy as default.</p>

<p>Here&rsquo;s a short wrap up on how to install/run homewbrew in such proxied environment.</p>

<h2>Prerequisites:</h2>

<p>read homebrew project page <a href="https://github.com/mxcl/homebrew/wiki/Installation">https://github.com/mxcl/homebrew/wiki/Installation</a></p>

<h2>homebrew install instructions behind a proxy:</h2>

<p>open Terminal.app</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">## don&#39;t sudo here, make sure you&#39;re in right user environment you&#39;ll want to use homebrew</span>
</span><span class='line'>
</span><span class='line'>     <span class="nb">echo</span> <span class="s2">&quot;proxy=proxy.a_company.local:8080&quot;</span> &gt; ~/.curlrc
</span><span class='line'>
</span><span class='line'><span class="c">## -&gt; will create a file containing proxy setting consulted by curl in ~/.curlrc   </span>
</span><span class='line'>
</span><span class='line'>     ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">## -&gt; install homebrew with a one liner:</span>
</span><span class='line'>
</span><span class='line'>     brew doctor
</span><span class='line'>
</span><span class='line'>     Warning: You have a curlrc file
</span><span class='line'>     If you have trouble downloading packages with Homebrew, <span class="k">then </span>maybe this
</span><span class='line'>     is the problem? If the following <span class="nb">command </span>doesn<span class="err">&#39;</span>t work, <span class="k">then </span>try removing
</span><span class='line'>     your curlrc:
</span><span class='line'>
</span><span class='line'>     brew update
</span><span class='line'>
</span><span class='line'>     brew install <span class="nv">wget</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>     <span class="o">==</span>&gt; Downloading http://ftpmirror.gnu.org/wget/wget-1.14.tar.gz
</span><span class='line'>     Already downloaded: /Library/Caches/Homebrew/wget-1.14.tar.gz
</span><span class='line'>     <span class="o">==</span>&gt; ./configure --prefix<span class="o">=</span>/usr/local/Cellar/wget/1.14 --sysconfdir<span class="o">=</span>/usr/local/etc --with-ssl<span class="o">=</span>openssl --disable-iri
</span><span class='line'>     <span class="o">==</span>&gt; make install
</span><span class='line'>     /usr/local/Cellar/wget/1.14: 8 files, 712K, built in 71 seconds
</span></code></pre></td></tr></table></div></figure>


<p>base requirements:</p>

<ul>
<li> Xcode4 command line utilities installed</li>
<li> working ruby 1.8.7  or higher environment ( check OSX systems installed in Terminal:  ruby -v)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacMini as Main Dev Machine]]></title>
    <link href="http://macops.github.io/macmini/dev/xcode/2013/05/31/macmini-as-main-dev-machine/"/>
    <updated>2013-05-31T00:25:00+02:00</updated>
    <id>http://macops.github.io/macmini/dev/xcode/2013/05/31/macmini-as-main-dev-machine</id>
    <content type="html"><![CDATA[<p>Just to share how to setup a pretty fast and reliable developer machine, a Apple MacMini Server QuadCore i7 .
The box will be based on a FusionDrive setup, no extra skills required appart following the iFixIt tutorial, the average turnaround time to have the box ready will be 45 minutes, you&rsquo;ll need a torx and a 3rd party SSD replacement drive as extra parts besides the MacMini Server (or normal MacMini with OWC DataDoubler Kit).
Thus far I&rsquo;ve only tried this two times, everytime I&rsquo;ve used an unbooted mini but see no problem to start such set up anytime later on any Thunderbolt MacMini (the data on remaining harddrive on the MacMini Server will be destroyed though &ndash; so be backed up)</p>

<ol>
<li>get a MacMini Server with i7 Processor</li>
<li>turn upside down, open the cover</li>
<li>follow instuctions to replace the hard drive for from the mini: <a href="http://bit.ly/18A62NA">http://bit.ly/18A62NA</a></li>
<li>replace the drive with a decent SSD</li>
<li>finish the instructions above but don&rsquo;t boot yet</li>
<li>connect the exctracted hard drive via external USB case to the mini</li>
<li>boot from the external USB</li>
<li>go thru OS X setup assistant as usual, create a account</li>
<li>login to the account</li>
<li>now you&rsquo;ll see that diskutility tells you there is a problem with the drive</li>
<li>diskutility offers to fix the problem for you</li>
</ol>


<p>&hellip; et Voila!<br/>
You&rsquo;ll get automagically build a FusionDrive by OS X Mountain Lion for free, without mumbling in the Terminal at all so we&rsquo;re following the koan &lsquo;less code is better code&rsquo; and on top you&rsquo;ll save some code kittens for more important tasks &ndash; pretty cool isn&rsquo;t it ?</p>

<p>To finish things up transfer some user data, install Xcode and your other dev tools required &ndash; you&rsquo;ll have a decent
fast machine in about two hours ready for any development task.
best not forget to upgrade RAM to 16GB and you&rsquo;re ready to run at top speed at a unbeatable price.</p>

<h3>Final Specs:</h3>

<ul>
<li>MacMini 2.6 GHz Intel i7 QuadCore</li>
<li>16 GB Ram</li>
<li>1,5 TB Fusion drive</li>
</ul>


<p>will cost about roughly:</p>

<h3>€1461  / $1461</h3>

<p>some parts I&rsquo;ve used to build the two boxes</p>

<ul>
<li>16 GB Ram &ndash; <a href="http://amzn.to/ZxxoB0">http://amzn.to/ZxxoB0</a></li>
<li>SSD drive &ndash; <a href="http://amzn.to/18BrHVM">http://amzn.to/18BrHVM</a>  / <a href="http://amzn.to/116fEHk">http://amzn.to/116fEHk</a></li>
</ul>


<p>in case you already have a MacMini but not a Server version, this kit will enable any Thunderbolt based MacMini to run a second drive:</p>

<ul>
<li>OWC DataDoubler &ndash; <a href="http://amzn.to/14db7Vp">http://amzn.to/14db7Vp</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kickstart with DNSimple]]></title>
    <link href="http://macops.github.io/DNSimple/Octopress/GitHub/2013/05/29/kickstart-with-dnsimple/"/>
    <updated>2013-05-29T22:30:00+02:00</updated>
    <id>http://macops.github.io/DNSimple/Octopress/GitHub/2013/05/29/kickstart-with-dnsimple</id>
    <content type="html"><![CDATA[<h2>DNSimple hosting provider plays well along github, our main server and some PaaS deployments</h2>

<p>We&rsquo;re pretty damn happy about DNSimple services &ndash; their excellent web-interface will simply allow us to run a mix of production and development servers
all adminstered under one roof. Especially the API providing Tokens for automated DNS update scripts is a bomb, this helps you to bring some VM deployments, Heroku setups, etc. to work seamlessly within minutes.</p>

<p>Just in case you&rsquo;ll like to check out DNSimple, try the 30 days demo with them.
Oh an before I&rsquo;ll forget, this is our referer URL : <a href="https://dnsimple.com/r/9fc6110fb9ef6c">https://dnsimple.com/r/9fc6110fb9ef6c</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kickstart with Github]]></title>
    <link href="http://macops.github.io/GitHub/Octopress/CNAME/2013/05/29/octopress/"/>
    <updated>2013-05-29T20:30:00+02:00</updated>
    <id>http://macops.github.io/GitHub/Octopress/CNAME/2013/05/29/octopress</id>
    <content type="html"><![CDATA[<h2>MacOps.io GitHub pages</h2>

<p>Here we are finally. Octopress runs on GitHub, while those DNS settings work fine from github pages, after deploying from Octopressthings screwed up &ndash; damn why that?
Ehm the solution is silly simple when using Octopress with GitHub or Heroku you should not forget to create a file containing the CNAME in the sources so the github server kittens can resolve correctly.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /Path/to/Octopress
</span><span class='line'>nano <span class="nb">source</span>/CNAME
</span><span class='line'><span class="c"># enter your CNAME  blog.&lt;FQDN&gt;</span>
</span><span class='line'><span class="c"># save file </span>
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>btw. some basic instructions to get started with Octopress:</p>

<p><a href="http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/">http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/</a>
<a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></p>
]]></content>
  </entry>
  
</feed>
