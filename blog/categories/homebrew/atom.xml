<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: homebrew | MacOps.io]]></title>
  <link href="http://www.macops.io/blog/categories/homebrew/atom.xml" rel="self"/>
  <link href="http://www.macops.io/"/>
  <updated>2013-06-14T12:12:00+02:00</updated>
  <id>http://www.macops.io/</id>
  <author>
    <name><![CDATA[headmin]]></name>
    <email><![CDATA[admin+blog@macops.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[homebrew-cask to install simple apps]]></title>
    <link href="http://www.macops.io/homebrew/terminal/software/install/cli/automation/2013/05/31/homebrew-cask-to-install-simple-app/"/>
    <updated>2013-05-31T18:45:00+02:00</updated>
    <id>http://www.macops.io/homebrew/terminal/software/install/cli/automation/2013/05/31/homebrew-cask-to-install-simple-app</id>
    <content type="html"><![CDATA[<p>An interesting extension to homebrew can be found here on GitHub <a href="http://bit.ly/11tA8JQ">http://bit.ly/11tA8JQ</a></p>

<p>Its called <em>homebrew-cask</em> and will allow you to install software like 1Password, Alfred2, VLC Player etc. directly from the command-line in the usual homebrew fashion via such command:
{% codeblock lang:bash %}
brew cask install one-password
{% endcodeblock %}</p>

<p>Basically homebrew-cask is based on <em>hombrew</em> by utilizing an extended repository with collective formulas of stored information where to download that specific software (i.e. VLC Player, Firefox) from the vendors-server, once homebrew-cask downloaded the source as a .zip/.dmg file the payload gets installed and will by shown as symlink in  ~/Applications directory  &ndash; yes exactly thats the user domain aka NSHomeDirectory().</p>

<p>The real path for applications installed by hombrew-cask is this one: <em>/opt/homebrew-cask/Caskroom/-vendor-/-version-/-named.app</em></p>

<p>current available cask commands are:</p>

<p>{% codeblock lang:bash %}
&ndash; alfred: used to modify Alfred&rsquo;s scope to include the Caskroom
&ndash; info: displays information about the cask of the given name
&ndash; list: lists installed casks
&ndash; search: searches all known casks
&ndash; home: opens the homepage of the cask of the given name
&ndash; uninstall: uninstalls the cask of the given name
&ndash; audit: verifies installability of casks
&ndash; create: creates a cask of the given name and opens it in an editor
&ndash; checklinks: checks for bad cask links
&ndash; edit: edits the cask of the given name
&ndash; linkapps: makes a symlink from all cask-installed .app files into ~/Applications
&ndash; unlinkapps: removes symlinks from cask-installed .app files from ~/Applications
&ndash; install: installs the cask of the given name
{% endcodeblock %}</p>

<p>Its a pretty new project and of course you&rsquo;ll might run into some issues but it&rsquo;s not meant to be replacing Munki, Jamf CasperSuite or other solutions on the shelf.</p>

<p>Some examples that are already in the sofware list:</p>

<ul>
<li>Firefox v21</li>
<li>Calibre</li>
<li>GitHub.app</li>
<li>VLC</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using homebrew on OSX in Enterprise Environments]]></title>
    <link href="http://www.macops.io/homebrew/OSX/Enterprise/MacPorts/curl/2013/05/31/using-homebrew-in-enterprise-environments/"/>
    <updated>2013-05-31T13:37:00+02:00</updated>
    <id>http://www.macops.io/homebrew/OSX/Enterprise/MacPorts/curl/2013/05/31/using-homebrew-in-enterprise-environments</id>
    <content type="html"><![CDATA[<p>Ever tried to to install software via homebrew while you&rsquo;re in enterprise environment or other networks with a web proxy present?
Glad you have tried, but without knowing in advance you&rsquo;ll might initally run into a problem while installing or updating via homebrew. Obviously that problem should be pretty simple to fix with enabling curl to use the proxy as default.</p>

<p>Here&rsquo;s a short wrap up on how to install/run homewbrew in such proxied environment.</p>

<h2>Prerequisites:</h2>

<p>read homebrew project page <a href="https://github.com/mxcl/homebrew/wiki/Installation">https://github.com/mxcl/homebrew/wiki/Installation</a></p>

<h2>homebrew install instructions behind a proxy:</h2>

<p>open Terminal.app
{% codeblock lang:bash %}</p>

<h2>don&rsquo;t sudo here, make sure you&rsquo;re in right user environment you&rsquo;ll want to use homebrew</h2>

<pre><code> echo "proxy=proxy.a_company.local:8080" &gt; ~/.curlrc   
</code></pre>

<h2>&ndash;> will create a file containing proxy setting consulted by curl in ~/.curlrc</h2>

<pre><code> ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
</code></pre>

<h2>&ndash;> install homebrew with a one liner:</h2>

<pre><code> brew doctor

 Warning: You have a curlrc file
 If you have trouble downloading packages with Homebrew, then maybe this
 is the problem? If the following command doesn't work, then try removing
 your curlrc:

 brew update

 brew install wget


 ==&gt; Downloading http://ftpmirror.gnu.org/wget/wget-1.14.tar.gz
 Already downloaded: /Library/Caches/Homebrew/wget-1.14.tar.gz
 ==&gt; ./configure --prefix=/usr/local/Cellar/wget/1.14 --sysconfdir=/usr/local/etc --with-ssl=openssl --disable-iri
 ==&gt; make install
 /usr/local/Cellar/wget/1.14: 8 files, 712K, built in 71 seconds 
</code></pre>

<p>{% endcodeblock %}</p>

<p>base requirements:</p>

<ul>
<li> Xcode4 command line utilities installed</li>
<li> working ruby 1.8.7  or higher environment ( check OSX systems installed in Terminal:  ruby -v)</li>
</ul>

]]></content>
  </entry>
  
</feed>
